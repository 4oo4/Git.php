{"name":"Git.php","tagline":"A PHP git library","body":"# Git.php\r\n\r\n## Description\r\n\r\nA PHP git repository control library. Allows the running of any git command from a PHP class. Runs git commands using `proc_open`, not `exec` or the type, therefore it can run in PHP safe mode.\r\n\r\n## Requirements\r\n\r\nA system with [git](http://git-scm.com/) installed\r\n\r\n## Basic Use\r\n\r\n```php\r\nrequire_once('Git.php');\r\n\r\n$repo = Git::open('/path/to/repo');  // -or- Git::create('/path/to/repo')\r\n\r\n$repo->add('.');\r\n$repo->commit('Some commit message');\r\n$repo->push('origin', 'master');\r\n```\r\n\r\n## API Reference\r\n\r\n### Git\r\n\r\n#### string  Git::get_bin ( void )\r\n\r\nReturns the path currently being used to run git.\r\n\r\n```php\r\necho Git::get_bin();  // \"/usr/bin/git\"\r\n```\r\n\r\n#### void  Git::set_bin ( string $path )\r\n\r\nSets the location where git can be found\r\n\r\n#### void  Git::windows_mode ( void )\r\n\r\nEnables \"windows mode\", a set of changes designed to make the library work better in a Windows environment. As of the moment, those changes include:\r\n\r\n* Sets the git bin location to just \"git\"\r\n\r\n#### GitRepo  Git::create ( string $repo_path[, string $source = null ])\r\n\r\nCreates a new git repositiory at the given `$repo_path` location. If a `$source` is given, the new repo will be cloned from that location.\r\n\r\n```php\r\n$repo = Git::create('/home/me/projects/create_repo_here');\r\n```\r\n\r\n#### GitRepo  Git::open ( string $repo_path )\r\n\r\nOpens an existing git repository.\r\n\r\n```php\r\n$repo = Git::open('/home/me/projects/existing_repo');\r\n```\r\n\r\n#### GitRepo  Git::is_repo ( mixed $repo )\r\n\r\nReturns `true` if `$repo` is an instance of `GitRepo`, or returns `false` otherwise.\r\n\r\n### GitRepo\r\n\r\n#### GitRepo  GitRepo::create_new ( string $repo_path[, string $source ])\r\n\r\nUsed internally by `Git::create`.\r\n\r\n#### GitRepo->__construct ([ string $repo_path = null[, bool $create_new = false ]])\r\n\r\nThe `GitRepo` constructor. If no arguments are given, a non-initialize `GitRepo` object will be created. As a non-initialize instance has no path, you cannot call git commands with it. The first param, `$repo_path`, defines the path of the repository to open. The second, `$create_new`, defines whether or not a new repository should be created if one was not found at the given path.\r\n\r\n```php\r\n// Open an existing repo\r\n$repo = new GitRepo('/home/me/projects/existing_repo');\r\n\r\n// Create a new repo\r\n$newRepo = new GitRepo('/home/me/projects/create_repo_here', true);\r\n```\r\n\r\n#### void  GitRepo->set_repo_path ( string $repo_path[, bool $create_new ])\r\n\r\nTakes the same parameters as the constructor above, except that the repo path is required here. Will set the path on a non-initialize `GitRepo` object, or change the path on an already existing one.\r\n\r\n#### bool  GitRepo->test_git ( void )\r\n\r\nTests if git is installed in the defined location and working properly by attempting to call to git. Returns `true` if git is installed, `false` if the call could not be made.\r\n\r\n#### string  GitRepo->run_command ( string $command )\r\n\r\nRuns an arbitrary command in the defined path using `proc_open`. Returns the contents of stdout in the case of a successful run, throws an Exception in the case of a non-zero status.\r\n\r\n```php\r\necho $repo->run_command('ls');\r\n```\r\n\r\n#### string  GitRepo->run ( string $command )\r\n\r\nRuns a git command in the defined path using `GitRepo->run_command`.\r\n\r\n```php\r\necho $repo->run('status');  // Runs `$ git status`\r\n```\r\n\r\n#### string  GitRepo->status ([ bool $html = false ])\r\n\r\nReturns the result of calling `$ git status`. If the `$html` param is set to `true`, newlines will be replaced with `\"<br />\"` for output in HTML.\r\n\r\n#### string  GitRepo->add ([ mixed $files = \"*\" ])\r\n\r\nRuns `$ git add ${files} -v`. If `$files` is an array, it will be converted into a properly formatted string.\r\n\r\n#### string  GitRepo->rm ([ mixed $files = \"*\"[, bool $cached = false ]])\r\n\r\nRuns `$ git rm ${files}`. If `$files` is an array, it will be converted into a properly formatted string. If the `$cached` is `true`, the `--cached` flag will be added to the command.\r\n\r\n#### string  GitRepo->commit ([ string $message = \"\" ])\r\n\r\nRuns `$ git commit -av -m \"${message}\"`.\r\n\r\n#### string  GitRepo->clone_to ( string $target )\r\n\r\nClones the repo into a new path using `$ git clone --local`.\r\n\r\n#### string  GitRepo->clone_from ( string $source )\r\n\r\nClones another repo into this path using `$ git clone --local`.\r\n\r\n#### string  GitRepo->clone_remote ( string $source )\r\n\r\nClones a remote repo into this path using `$ git clone`.\r\n\r\n#### string  GitRepo->clean ([ bool $dirs = false[, bool $force = false ]])\r\n\r\nRuns `$ git clean`. If `$dirs` is `true`, the `-d` flag will be added. If `$force` is `true`, the `-f` flag will be added.\r\n\r\n#### string  GitRepo->create_branch ( string $branch )\r\n\r\nCreates a new branch using `$ git branch ${branch}`.\r\n\r\n#### string  GitRepo->delete_branch ( string $branch[, bool $force = false ])\r\n\r\nDeletes an existing branch using `$ git branch -d ${branch}`. If `$force` is `true`, the deletion will be forced using the `-D` flag.\r\n\r\n#### array  GitRepo->list_branches ([ bool $keep_asterisk = false ])\r\n\r\nReturns an array of all existing local branches. If the `$keep_asterisk` flag is `true`, the currently checked out branch will still have the asterisk by its name, otherwise it is removed.\r\n\r\n```php\r\n$branches = $repo->list_branches();\r\nforeach ($branches as $branch) {\r\n    echo $branch;\r\n}\r\n```\r\n\r\n#### array  GitRepo->list_remote_branches ( void )\r\n\r\nReturns an array of all remote branches using `$ git branch -r`.\r\n\r\n#### string  GitRepo->active_branch ([ bool $keep_asterisk = false ])\r\n\r\nReturns the name of the currently active branch. If the `$keep_asterisk` flag is `true`, the currently checked out branch will still have the asterisk by its name, otherwise it is removed.\r\n\r\n#### string  GitRepo->checkout ( string $branch )\r\n\r\nCheckout the given branch.\r\n\r\n#### string  GitRepo->merge ( string $branch )\r\n\r\nMerge another branch into the current branch using `$ git merge ${branch} --no-ff`.\r\n\r\n#### string  GitRepo->fetch ( void )\r\n\r\nRun `$ git fetch`.\r\n\r\n#### string  GitRepo->add_tag ( string $tag[, string $message = null ])\r\n\r\nAdds a new tag to the current ref using `$ git tag -a ${tag} -m ${message}`. If a message is not given, the tag name will be used as the message.\r\n\r\n```php\r\n$repo->add_tag('v1.0');  // Runs `$ git tag -a \"v1.0\" -m \"v1.0\"`\r\n```\r\n\r\n#### array  GitRepo->list_tags ([ string $pattern = null ])\r\n\r\nReturns an array of all existing tags matching the given pattern using `$ git tag -l ${pattern}`.\r\n\r\n#### string  GitRepo->push ( string $remote, string $branch )\r\n\r\nPushes the given branch out to the given remote.\r\n\r\n```php\r\n$repo->push('origin', 'master');  // Runs `$ git push origin master`\r\n```\r\n\r\n#### string  GitRepo->pull ( string remote, string $branch )\r\n\r\nPulls the given branch from the given remote.\r\n\r\n#### void  GitRepo->set_description ( string $description )\r\n\r\nSets the project description stored in `\"repo/.git/description\"`.\r\n\r\n#### string  GitRepo->get_description ( void )\r\n\r\nGets the project description stored in `\"repo/.git/description\"`.\r\n\r\n#### void  GitRepo->set_env ( string $key, string $value )\r\n\r\nSets an environment variable for future commands.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}